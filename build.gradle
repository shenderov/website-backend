buildscript {
	ext {
		springBootVersion = '2.1.3.RELEASE'
	}
	repositories {
		jcenter()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("org.jfrog.buildinfo:build-info-extractor-gradle:latest.release")
	}
}

apply plugin: 'java'
apply plugin: 'eclipse-wtp'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'war'
apply plugin: 'com.jfrog.artifactory'

group = 'me.shenderov'
version = '1.0.x-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	jcenter()
}

configurations {
	providedRuntime
}

dependencies {
	compile("org.springframework.boot:spring-boot-starter-web:${springBootVersion}")
	compile("org.springframework.boot:spring-boot-starter-data-mongodb:${springBootVersion}")
	compile("org.springframework.boot:spring-boot-starter-cache:${springBootVersion}")
	compile("org.springframework.boot:spring-boot-starter-mail:${springBootVersion}")
	compile("org.springframework.boot:spring-boot-starter-thymeleaf:${springBootVersion}")
	compile('org.apache.logging.log4j:log4j-api:2.11.1')
	compile('org.apache.logging.log4j:log4j-core:2.11.1')


	testCompile("org.springframework.boot:spring-boot-starter-test:${springBootVersion}")

//	compile('org.springframework.boot:spring-boot-starter-data-rest')
//	compile('org.springframework.boot:spring-boot-starter-data-jpa')
//	compile('org.springframework.mobile:spring-mobile-device:1.1.5.RELEASE')
//	compile('org.springframework.boot:spring-boot-devtools')
//	implementation('org.springframework.boot:spring-boot-starter-data-rest')
//	implementation('org.springframework.boot:spring-boot-starter-security')
//	implementation('org.springframework.boot:spring-boot-starter-web')
//	compile 'org.springframework.boot:spring-boot-starter-web'
//	providedRuntime('org.springframework.boot:spring-boot-starter-tomcat')
//	compile('org.springframework.boot:spring-boot-starter-test')
//	testImplementation('org.springframework.security:spring-security-test')
}

artifactory {
	publish {
		publishBuildInfo = true
		publishArtifacts = true
		defaults {
			publishConfigs('archives', 'published')
		}
	}
}

artifactoryPublish {
	dependsOn bootWar
}

artifactoryDeploy {
	dependsOn artifactoryPublish
}

bootWar {
	archiveName = getWarName()
}

def getWarName() {
    String jenkinsBuild = System.env.BUILD_NUMBER == null ? "" : "-$System.env.BUILD_NUMBER"
	return String.format("yyy-%s-%s%s.war", rootProject.name, version, jenkinsBuild)
}